/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.97.0
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { Counter } from "./Counter";

const bytecode = decompressBytecode("H4sIAAAAAAAAA6VWT4gTVxj/siZudmu7D9wt6dh2Y8muo6dQd61LS51hEiZxDHlLlqqUkAUR9FC7DSqCBwNC6aHQtdDW45ZS2UvL5J+U1kPAHjzu0UIP8SAo3cBcBBeh29/3ZmLSbBRKA+HNe/P9/X3f93ujeUm6SDRC6jfuFbdbIbG9zWekbUq6QbuNYsEbFYtGSzOWqZwakcIMG9pjovjTw3TqWXtEPmuHL1Iop1kbJO0qlToUl1bzSjlDUd2crAR6mRfoHQv0DOjp0Fvr6vFz0XYbxbSgouM2yicoKrKJVqkTb0inGuO9ng1jLxJlg4TeSZC0biehL3SrUSlaboN9wm6Dz6XTbEFHsA5st6RTv9Lda4/jg3ElVFxONQr9/fDxjrRcUU5B3kwY0m5WlJ90mOOsSNv1Sh3jbZxFEN+0dGocH2xPtqRdv6me0+y3vq6ezQR8CtIe7sDjdfZ72aDrRcuLCpOgD/tOzUUcHyHPMawnpVW737WDPH7p83Wv64tz0h6KAfv0d2B/BLauHjGI4GeM/RRtb1ykRavoeK+IbLxVzHt7RC7ZkoXqRnmJ4vpixCht0ofSNHS1N6cMaTXiwCSjm6lhtTXZlzhNkKudgxx0EmxjUaZJB1ZxPT0H7Bpf4DmjsHTqp3xcdtTjqWZzPdw15Bf3c21s4Jn1FJYD8ltKPt84hzzjeo57o65rj5MKE+3Bjlgv+33othBLMqhrTD37vRhDHTJ97zLSvi38HMLcaz+hV3/m/b5suMK9uS87V5nNYI4yK4jjtpCFZoDjvLGQnRdKJj1niDQwSS/DN2TyTa8sOd4pej8XXtVQnxm/Rq8GNXqNa4S+XPZxQP9vUlKacV3tTeBi1e/7NUkMqQn9yXmWU2GaTSG2FGJzquvo73k+w3oE9t4DDnHYi+lp7q8a2475mNce9c7do73zqi+D8+JJd6ZYcGeBxwGeZZGdrEzlZujyCQrB/yjkRvblUi3kGRWL8zQrifS3lgxtaYVEeglYEGpVw9zKDGYqi3k6jngkbME+Y1/jGsVUXezmeu+8uY7+p97ePdeTq3Lt1DlqdVCmhUBepzBLDrCLKi5R2LmVvhlf7ZvxVdjmPlX7nf1GMb9/IOfU+2bfXfXnkfGqBvwziTq6CzOmoG+Idn0b9blWs9ZIs9tUNLF/gv+WoJt49x1kjj8llh3tyt4gEl15FVMHMVnuc92v+X1PfzTQP9anL339VdIc2OC4Opijv9zBvJJaHnkVwH1LkFmcQk9hoP4tc0ArbNDe3Dz+mC/UE7V+U+bdJGos9FyEeO4GdA4Fdo2X2N2vZriAXlQykWEyUcb94OKc1J4YnLfUtuLdvI/9B9xCL8Ht/+I+3dMPtZV+oc1c4/V4z3WH8x79yhgonumoPj7a1RnSg3cCDttQ8naD7So5vme0BztsLwTy8R6vVbnnA86rcv/yO+YVnpso+nbsxRxXbS1kwxu4W3ZjjpbBI3vQ8/48ZcMG/E3gXJY2xXg/9w3mcYnod865ZIpQvz50V7qziViSe00y4Ct0BN8q2E/4+APfLaOL/3SA/7U+/L3nff9xhbSTqo7IY1Llw98XWKeDNTLtr+E30pjlvOv63Bwhdad05sBTuBuZd60Gc4fn37k7OPew/y2hOFVxNvSE9mjY/U+6ks1jLgJfkOU5Qg1mmKv9GLLzjPfKD7nw93jP3MgxoN7VFZyv4nxNxaZqhzvWCnqCnx33+d2h+E7dG/iu2hST4P8pYJzUT+Nb7cky4+lpW7KL57UAz4m+eTD6eQQ1D+MfwX83uHUU9v2cwS0KM7uBORE8J0bfnE4M2h3gJr5jW6w3RGcYf4aH8aeNPjnz6aUL/G174YOr+fO/bX/27t27t/Trtz7/ynbvHLq2f7l0cNeXf/zYLp2/cKZ89pOzSrb3G7/nr2NX/DXqBeujYG0H631/HT0RrKl/AAnxsF5oCwAA");

export class CounterFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, Counter.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: Counter.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<Counter>> {
    const factory = new CounterFactory(wallet);
    return factory.deploy(options);
  }
}
